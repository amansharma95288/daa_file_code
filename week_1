Q1. Given an array of non-negative integers, design a linear algorithm and implement it using a program to find whether given key element is present in the array or not. Also, find total number of comparisons for each input case. 
(Time Complexity = O(n), where n is the size of input) 

    
#include<iostream>
using namespace std; 
int main() {
int t;
cout<<"Enter the number of test cases: ";
cin>>t;
while(t != 0) { 
int n, key = -1, i;
cout<<"Enter the size of array: "; 
cin>>n;
int arr[n]; 
cout<<"Enter the elements: ";
for(int i=0 ; i<n ; i++) 
   cin>>arr[i]; 
cout<<"Enter the key: "; 
cin>>key;
for(i=0 ; i<n ; i++) {
if(key == arr[i]) 
{
  cout<<"Element found!"<<endl; break; 
} 
} 
if(i== n) {
cout<<"Element not found!"<<endl;
cout<<"Total number of comparison: "<<i<<endl; 
} 
else{ cout<<"Tot al numbe r of comparison: "<<i+1<<en dl; 
}
t--; 
} 
return 0; 
} 




Q2. Given an already sorted array of positive integers, design an algorithm and implement it using program to find whether given key element is present in the array or not. Also, find the total number of comparisons for each input case. 
(Time Complexity = O(logn), where n is the size of input) 

    
#include<iostream>
using namespace std; 
int binary_search(int arr[], int l, int r, int key) {
if(r < l) 
     return -1; 
int mid = l + (r-l)/2; 
if(arr[mid] == key) 
   return mid; 
if(arr[mid] > key) 
   return binary_search(arr, l , mid-1, key); 
return binary_search(arr, mid+1, r, key);
} 
int countFrequency(int arr[], int n, int key) { int pos = binary_search(arr, 0, n-1, key); 
if(pos == -1) 
   return -1;
int count = 1; 
int left = pos-1, right = pos+1;
while(left>=0 &&arr[left] == key) { 
count++; left--; 
}
while(right < n &&arr[right] == key) {
count++; right+
+; } return count; 
}
int main() {
int n, key; 
int t; 
cout<<"\nEnter no. of times: "; cin>>t; while(t != 0) { 
cout<<"\nEnter the size of array: ";
cin>>n; int a[n]; 
cout<<"\nEnter the elements of array: "; 
for(int i=0 ; i<n ; i++)
    cin>>a[i];
cout<<"\nEnter the key element: "; cin>>key; 
cout<<key<<" "<<countFrequency(a, n, key);
t--;
} return 0; 
} 




Q3. Given an already sorted array of positive integers, design an algorithm and implement it using a program to find whether a given key element is present in the sorted array or not . For an array arr[n], search at the indexes arr[0], arr[2], arr[4],â€¦.,arr[2k] and so on. Once the interval (arr[2k] < key <arr[2k+1]) is found, perform a linear search operation from the index 2k to find the element key. 
(Complexity < O(n), n = no. of elements to be scanned for searching.) 

#include<iostream>
using namespace std; 
void js(int arr[],int n,intkey) {
int i=0; int j=2; int comp=0; 
while(arr[j]<=key &&j<n) {
comp++; i=j; j=j+2;
if(j>n-1) {
j=n; 
} 
} 
for(int k=i;k<j;k++) {
int count =0;
count++; 
if(arr[k]==key) {
cout<<"Key is present !\n"<<(comp+count)<<endl; 
} 
else{
cout<<"Key is not present !\n"<<(comp+count)<<endl;
break; 
} 
} 
}
int main() {
int t,n,arr[100],key;
cout<<"Enter test cases: ";
cin>>t;
while(t--) {
cout<<"\nEnter the no. of element in the array: "; 
cin>>n; 
cout<<"\nEnter the elements in the array: "; 
for(int i=0;i<n;i++) {
cin>>arr[i]; 
}
cout<<"Enter the value which you want to search: ";
cin>>key;
js(arr,n,key); 
}
return 0; 
} 
